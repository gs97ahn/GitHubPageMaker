<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="/tag/etc/feed.xml" rel="self" type="application/atom+xml" />
  <link href="/" rel="alternate" type="text/html" />
  <updated>2022-11-25T17:18:09+09:00</updated>
  <id>/tag/etc/feed.xml</id>

  
  
  

  
    <title type="html">nogamsung | </title>
  

  
    <subtitle>Computer Science &amp; Engineering</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Unreal Engine - Physics Engine</title>
      <link href="/Unreal_Engine-Physics_Engine" rel="alternate" type="text/html" title="Unreal Engine - Physics Engine" />
      <published>2022-11-01T01:30:00+09:00</published>
      <updated>2022-11-01T01:30:00+09:00</updated>
      <id>/Unreal_Engine-Physics_Engine</id>
      <content type="html" xml:base="/Unreal_Engine-Physics_Engine">&lt;h3 id=&quot;move-an-object&quot;&gt;Move an Object&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Ways to move an object in the game world
    &lt;ul&gt;
      &lt;li&gt;Change coordinates every frame: Use Tick event node to change to location&lt;/li&gt;
      &lt;li&gt;Use timeline&lt;/li&gt;
      &lt;li&gt;Use movement component: Add movement component in an actor or a character&lt;/li&gt;
      &lt;li&gt;Use physics engine&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Ways to use physics engine
    &lt;ul&gt;
      &lt;li&gt;cons: Many parts are unpredictable&lt;/li&gt;
      &lt;li&gt;pros: Not many tasks are required compared to other methods
        &lt;ul&gt;
          &lt;li&gt;If level gets big, it is impossible to work with it, so you will be forced to use physics engine&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-necessity-of-physics-engine-in-the-game&quot;&gt;The Necessity of Physics Engine in the Game&lt;/h3&gt;
&lt;p&gt;In the game, it is actually good to implement codes. However, it is very difficult to implement codes for all the
physics acts. You must think whether it would be necessary to use physics engine simulation.&lt;/p&gt;

&lt;h3 id=&quot;physics-engine-status&quot;&gt;Physics Engine Status&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Physics Engine
    &lt;ul&gt;
      &lt;li&gt;PhysX (PhysX SDK)
        &lt;ul&gt;
          &lt;li&gt;Owned by Nvidia (2008 ~ )&lt;/li&gt;
          &lt;li&gt;PC/Console version is free, open source (2018 ~ )&lt;/li&gt;
          &lt;li&gt;GPU acceleration function (rely on GPU)&lt;/li&gt;
          &lt;li&gt;In Unreal engine and Unity&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Havok
        &lt;ul&gt;
          &lt;li&gt;Owned by Microsoft (2015 ~ )&lt;/li&gt;
          &lt;li&gt;Respected and not an open source&lt;/li&gt;
          &lt;li&gt;GPU acceleration is not used and uses CPU caculation instead (pros)&lt;/li&gt;
          &lt;li&gt;Owns AI tool, animation tool, etc.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Open Source Physics Engine
    &lt;ul&gt;
      &lt;li&gt;ODE (Open Dynamics Engine)&lt;/li&gt;
      &lt;li&gt;Newton Game Dynamics&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/screenshots/2022/10/31/5.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;pros-and-cons-of-physics-engine&quot;&gt;Pros and Cons of Physics Engine&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Cons of Physics Engine
    &lt;ul&gt;
      &lt;li&gt;Low reproducibility&lt;/li&gt;
      &lt;li&gt;Very low controllability&lt;/li&gt;
      &lt;li&gt;Difficult for precise situation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Reciprocity of game and physics engine
    &lt;ul&gt;
      &lt;li&gt;Game is about constructing entertainment&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;physics-engine-and-collision&quot;&gt;Physics Engine and Collision&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Apply physics engine to actor
    &lt;ul&gt;
      &lt;li&gt;Suppose that an actor is a rigid body&lt;/li&gt;
      &lt;li&gt;Physics engine is used on collision volume and not on mesh&lt;/li&gt;
      &lt;li&gt;Actor mesh must have collision volume&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Physics application to collision volume
    &lt;ul&gt;
      &lt;li&gt;Collision volume should not be complicated&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ways-to-use-physics-engine&quot;&gt;Ways to use physics engine&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Physics engine application: Go through the following steps in the actor editor’s &lt;strong&gt;detail&lt;/strong&gt; tab
    &lt;ul&gt;
      &lt;li&gt;Activate &lt;strong&gt;Simulate Physics&lt;/strong&gt; in &lt;strong&gt;Physics&lt;/strong&gt; area
        &lt;ul&gt;
          &lt;li&gt;The &lt;strong&gt;mobility&lt;/strong&gt; property changes to &lt;strong&gt;movable&lt;/strong&gt; automatically&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;actors-physics-property&quot;&gt;Actor’s physics property&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Actor’s physics property
    &lt;ul&gt;
      &lt;li&gt;Start Awake&lt;/li&gt;
      &lt;li&gt;Mass in Kg&lt;/li&gt;
      &lt;li&gt;Enable Gravity&lt;/li&gt;
      &lt;li&gt;Center of Mass Offset&lt;/li&gt;
      &lt;li&gt;Etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;physical-material&quot;&gt;Physical Material&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Value related to collision depends on the material&lt;/li&gt;
  &lt;li&gt;Use an &lt;strong&gt;exclusive asset that can input a physics value&lt;/strong&gt;, instead of setting physics value every time&lt;/li&gt;
  &lt;li&gt;Use the physical material to give physics value to similar material meshes&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;physical-materials-core-property&quot;&gt;Physical Material’s Core Property&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Friction
    &lt;ul&gt;
      &lt;li&gt;Friction coefficient: 0 (weak) ~ 1 (strong)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Friction Combine Mode
    &lt;ul&gt;
      &lt;li&gt;Friction occurs when two object make contact -&amp;gt; consider both friction property&lt;/li&gt;
      &lt;li&gt;4 friction combine mode in UE
        &lt;ul&gt;
          &lt;li&gt;Average&lt;/li&gt;
          &lt;li&gt;Multiply&lt;/li&gt;
          &lt;li&gt;Max&lt;/li&gt;
          &lt;li&gt;Min&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Restitution
    &lt;ul&gt;
      &lt;li&gt;Restitution coefficient: 0 (weak restitution) ~ 1 (strong restitution)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Density
    &lt;ul&gt;
      &lt;li&gt;Friction = Friction coefficient * Mass&lt;/li&gt;
      &lt;li&gt;An object’s mass is very important in physics&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Entertainment Software Lecture by &lt;a href=&quot;https://www.inu.ac.kr/user/indexSub.do?codyMenuSeq=1282578&amp;amp;siteId=isis&amp;amp;dum=dum&amp;amp;command=empDetail&amp;amp;empNum=24008&amp;amp;empSearchTab=01&amp;amp;deptCode=&amp;amp;siteId=isis&quot; target=&quot;_blank&quot;&gt;Jongseung Park&lt;/a&gt; in &lt;a href=&quot;https://www.inu.ac.kr/&quot; target=&quot;_blank&quot;&gt;Incheon National University&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9788968482809&quot; target=&quot;_blank&quot;&gt;실전 게임 제작으로 배우는 언리얼 엔진 4 by 윤인성&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9791156005896&quot; target=&quot;_blank&quot;&gt;언리얼 게임개봘과 시뮬레이션 by 박종승, 오경수&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>nogamsung</name>
        
        
      </author>

      

      
        <category term="etc" />
      

      
        <summary type="html">Move an Object Ways to move an object in the game world Change coordinates every frame: Use Tick event node to change to location Use timeline Use movement component: Add movement component in an actor or a character Use physics engine Ways to use physics engine cons: Many parts are unpredictable pros: Not many tasks are required compared to other methods If level gets big, it is impossible to work with it, so you will be forced to use physics engine</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Unreal Engine - Timeline</title>
      <link href="/Unreal_Engine-Timeline" rel="alternate" type="text/html" title="Unreal Engine - Timeline" />
      <published>2022-10-18T01:30:00+09:00</published>
      <updated>2022-10-18T01:30:00+09:00</updated>
      <id>/Unreal_Engine-Timeline</id>
      <content type="html" xml:base="/Unreal_Engine-Timeline">&lt;h2 id=&quot;timeline&quot;&gt;Timeline&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Set a specific time and repeat a certain movement
    &lt;ul&gt;
      &lt;li&gt;E.g. At 5 sec move upwards and open a door, etc.&lt;/li&gt;
      &lt;li&gt;Express this in timeline
        &lt;ul&gt;
          &lt;li&gt;Timeline is a event that occurs in a time sequence&lt;/li&gt;
          &lt;li&gt;Parallel axis is time axis&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Timeline
    &lt;ul&gt;
      &lt;li&gt;Timeline is a change in value which occurs in time
        &lt;ul&gt;
          &lt;li&gt;X-axis is time and Y-axis is value&lt;/li&gt;
          &lt;li&gt;“Value” = “Track”&lt;/li&gt;
          &lt;li&gt;Track Category: float, vector, color, event&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Curve Input: Input keys to express a curve
        &lt;ul&gt;
          &lt;li&gt;Key = (time, value)&lt;/li&gt;
          &lt;li&gt;Adding key: shift + click&lt;/li&gt;
          &lt;li&gt;Interpolation between keys create a curve&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;timeline-example&quot;&gt;Timeline Example&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Actors spin example
    &lt;ul&gt;
      &lt;li&gt;Actor should spin
        &lt;ul&gt;
          &lt;li&gt;It should spin every second&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Create timeline: Float Track
        &lt;ul&gt;
          &lt;li&gt;1 spin / 1 sec = Change the float value from 0 to 360 every second in the timeline&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Timeline Node Output Pin
        &lt;ul&gt;
          &lt;li&gt;Update Output Pin: Continuous execution during the timeline&lt;/li&gt;
          &lt;li&gt;Finished Output Pin: End when timeline finishes&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Rotate Implementation (Connect update pin)
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;Make&lt;/strong&gt; Rotator: Make a structure from rotator 3 float values(Roll, Pitch, Yaw)
            &lt;ul&gt;
              &lt;li&gt;Opposite function: &lt;strong&gt;Break&lt;/strong&gt; Rotator [&lt;strong&gt;Make&lt;/strong&gt; and &lt;strong&gt;Break&lt;/strong&gt;]&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;SetRelativeRotation: Set rotation relative to the parent component&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;key-interpolation&quot;&gt;Key Interpolation&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Lerp
    &lt;ul&gt;
      &lt;li&gt;Linear Interpolation
        &lt;ul&gt;
          &lt;li&gt;Linear interpolation between two values&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Lerp Interpolation Function
        &lt;ul&gt;
          &lt;li&gt;Lerp(A, B, α) = A * (1 - α) + B * α = A + (B - A) * α&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Key Interpolation
    &lt;ul&gt;
      &lt;li&gt;Linear&lt;/li&gt;
      &lt;li&gt;Automatic&lt;/li&gt;
      &lt;li&gt;Ease In / Ease Out
        &lt;ul&gt;
          &lt;li&gt;Smooth animation&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;timeline-reverse-function&quot;&gt;Timeline Reverse Function&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Timeline input pin
    &lt;ul&gt;
      &lt;li&gt;Play input pin&lt;/li&gt;
      &lt;li&gt;Reverse input pin&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Timeline output pin
    &lt;ul&gt;
      &lt;li&gt;Direction output pin
        &lt;ul&gt;
          &lt;li&gt;Play direction data of current timeline&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;ETimelineDirection&lt;/strong&gt; value&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sliding-door&quot;&gt;Sliding Door&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;2 Door with a rail
    &lt;ul&gt;
      &lt;li&gt;Push to door forward and make it move left or right&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/screenshots/2022/10/17/screenshot-1.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DoorLeft and DoorRight movement
    &lt;ul&gt;
      &lt;li&gt;Move -100 in x-axis for a second
        &lt;ul&gt;
          &lt;li&gt;(0, -50, 0), (0, 50, 0) -&amp;gt; (-100, -50, 0), (-100, 50, 0)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Next move +-100 in y-axis for a second
        &lt;ul&gt;
          &lt;li&gt;(-100, -50, 0), (-100, 50, 0) -&amp;gt; (-100, -150, 0), (-100, 150, 0)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sliding-door-implementation&quot;&gt;Sliding Door Implementation&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Arrow Component
    &lt;ul&gt;
      &lt;li&gt;Visible in editor&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Timeline
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Float track&lt;/strong&gt; cannot express linear interpolation -&amp;gt; Use &lt;strong&gt;Vector track&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;Timeline implementation (DoorRight)
        &lt;ul&gt;
          &lt;li&gt;Move -100 in x-axis for a second&lt;/li&gt;
          &lt;li&gt;Next, move +100 in y-axis for a second&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Movement
        &lt;ul&gt;
          &lt;li&gt;SetRelativeLocation&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/screenshots/2022/10/17/screenshot-2.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Entertainment Software Lecture by &lt;a href=&quot;https://www.inu.ac.kr/user/indexSub.do?codyMenuSeq=1282578&amp;amp;siteId=isis&amp;amp;dum=dum&amp;amp;command=empDetail&amp;amp;empNum=24008&amp;amp;empSearchTab=01&amp;amp;deptCode=&amp;amp;siteId=isis&quot; target=&quot;_blank&quot;&gt;Jongseung Park&lt;/a&gt; in &lt;a href=&quot;https://www.inu.ac.kr/&quot; target=&quot;_blank&quot;&gt;Incheon National University&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9788968482809&quot; target=&quot;_blank&quot;&gt;실전 게임 제작으로 배우는 언리얼 엔진 4 by 윤인성&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9791156005896&quot; target=&quot;_blank&quot;&gt;언리얼 게임개봘과 시뮬레이션 by 박종승, 오경수&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.unrealengine.com/4.27/en-US/&quot;&gt;Unreal Engine Document&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>nogamsung</name>
        
        
      </author>

      

      
        <category term="etc" />
      

      
        <summary type="html">Timeline Set a specific time and repeat a certain movement E.g. At 5 sec move upwards and open a door, etc. Express this in timeline Timeline is a event that occurs in a time sequence Parallel axis is time axis Timeline Timeline is a change in value which occurs in time X-axis is time and Y-axis is value “Value” = “Track” Track Category: float, vector, color, event Curve Input: Input keys to express a curve Key = (time, value) Adding key: shift + click Interpolation between keys create a curve</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Unreal Engine - Pure Function and Type Cast</title>
      <link href="/Unreal_Engine-Pure_Function_and_Type_Cast" rel="alternate" type="text/html" title="Unreal Engine - Pure Function and Type Cast" />
      <published>2022-10-11T01:30:00+09:00</published>
      <updated>2022-10-11T01:30:00+09:00</updated>
      <id>/Unreal_Engine-Pure_Function_and_Type_Cast</id>
      <content type="html" xml:base="/Unreal_Engine-Pure_Function_and_Type_Cast">&lt;h2 id=&quot;pure-function&quot;&gt;Pure function&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Pure function
    &lt;ul&gt;
      &lt;li&gt;Output value is dependent on input value&lt;/li&gt;
      &lt;li&gt;If it references an external function variable value, it is not a pure function&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Purify
    &lt;ul&gt;
      &lt;li&gt;For pure function, check the pure property&lt;/li&gt;
      &lt;li&gt;Type transformation node can be a pure node&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;type-casting-and-favorites&quot;&gt;Type Casting and Favorites&lt;/h2&gt;
&lt;h3 id=&quot;type-casting-in-inherited-relationship&quot;&gt;Type Casting in Inherited Relationship&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Superclass(Fruit) and subclass(Apple)
    &lt;ul&gt;
      &lt;li&gt;Apple class has fruit information and distinctive features&lt;/li&gt;
      &lt;li&gt;Apple is a fruit (O), Fruit is an apple (X)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Subclass type(Apple) casted to superclass(Fruit)
    &lt;ul&gt;
      &lt;li&gt;Automatic&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Superclass type(Fruit) casted to subclass(Apple)
    &lt;ul&gt;
      &lt;li&gt;Must be done explicitly&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;type-casting&quot;&gt;Type Casting&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;A reference type transforming into a different reference type is called &lt;strong&gt;type casting&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;The need for type casting
    &lt;ul&gt;
      &lt;li&gt;E.g. when two actors collide, each actor calls the other actor’s function&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;favorites-function&quot;&gt;Favorites function&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Commonly used function/node: add to favorites which then will be accessible from &lt;strong&gt;palette&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Entertainment Software Lecture by &lt;a href=&quot;https://www.inu.ac.kr/user/indexSub.do?codyMenuSeq=1282578&amp;amp;siteId=isis&amp;amp;dum=dum&amp;amp;command=empDetail&amp;amp;empNum=24008&amp;amp;empSearchTab=01&amp;amp;deptCode=&amp;amp;siteId=isis&quot; target=&quot;_blank&quot;&gt;Jongseung Park&lt;/a&gt; in &lt;a href=&quot;https://www.inu.ac.kr/&quot; target=&quot;_blank&quot;&gt;Incheon National University&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9788968482809&quot; target=&quot;_blank&quot;&gt;실전 게임 제작으로 배우는 언리얼 엔진 4 by 윤인성&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9791156005896&quot; target=&quot;_blank&quot;&gt;언리얼 게임개봘과 시뮬레이션 by 박종승, 오경수&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.unrealengine.com/4.27/en-US/&quot;&gt;Unreal Engine Document&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>nogamsung</name>
        
        
      </author>

      

      
        <category term="etc" />
      

      
        <summary type="html">Pure function Pure function Output value is dependent on input value If it references an external function variable value, it is not a pure function Purify For pure function, check the pure property Type transformation node can be a pure node</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Unreal Engine - Variable and Basic Function</title>
      <link href="/Unreal_Engine-Variable_and_Basic_Function" rel="alternate" type="text/html" title="Unreal Engine - Variable and Basic Function" />
      <published>2022-10-05T19:30:00+09:00</published>
      <updated>2022-10-05T19:30:00+09:00</updated>
      <id>/Unreal_Engine-Variable_and_Basic_Function</id>
      <content type="html" xml:base="/Unreal_Engine-Variable_and_Basic_Function">&lt;h2 id=&quot;create-variable-and-variables-types&quot;&gt;Create Variable and Variables types&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Create variable
    &lt;ul&gt;
      &lt;li&gt;Add variable from my blueprint panel&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Frequently used variable types
    &lt;ul&gt;
      &lt;li&gt;Boolean: True/False&lt;/li&gt;
      &lt;li&gt;Integer&lt;/li&gt;
      &lt;li&gt;Float&lt;/li&gt;
      &lt;li&gt;Vector: X, Y, and Z float type structure&lt;/li&gt;
      &lt;li&gt;String&lt;/li&gt;
      &lt;li&gt;Object Type&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Variable Types
    &lt;ul&gt;
      &lt;li&gt;Variables have its own color assigned to it&lt;/li&gt;
      &lt;li&gt;Object type may not be compatible even though it has the same color&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;types-of-variable&quot;&gt;Types of Variable&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/screenshots/2022/10/05/screenshot-1.png&quot; alt=&quot;screenshot-1&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;variable-extraction-and-assignment-variable-node-placement&quot;&gt;Variable Extraction and Assignment, Variable Node Placement&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Variable extraction and assignment
    &lt;ul&gt;
      &lt;li&gt;extraction = Get&lt;/li&gt;
      &lt;li&gt;assignment = Set&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Variable node placement
    &lt;ul&gt;
      &lt;li&gt;drag &amp;amp; drop from the ‘my blueprint’ and select Get/Set for placement&lt;/li&gt;
      &lt;li&gt;drag &amp;amp; drop while pressing Ctrl/Alt key for faster Get/Set placement&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;private-variable-and-elevation-to-variable&quot;&gt;Private Variable and Elevation to Variable&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Private variable
    &lt;ul&gt;
      &lt;li&gt;To set the variable ‘private’, only internal variable Get/Set is possible
        &lt;ul&gt;
          &lt;li&gt;If it is not ‘private’, Get/Set is possible from external&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Elevation to variable
    &lt;ul&gt;
      &lt;li&gt;Make constant value to variable&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;creation-and-usage-of-structure&quot;&gt;Creation and Usage of Structure&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Get/Set Node&lt;/li&gt;
  &lt;li&gt;Make Structure Node&lt;/li&gt;
  &lt;li&gt;Split Structure Node&lt;/li&gt;
  &lt;li&gt;Set Member Structure Node&lt;/li&gt;
  &lt;li&gt;Flow Control Node
    &lt;ul&gt;
      &lt;li&gt;Sequence Node&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;creation-and-usage-of-enum-variable&quot;&gt;Creation and Usage of Enum Variable&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Get/Set Node&lt;/li&gt;
  &lt;li&gt;Enum Switch Node&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;creation-and-usage-of-function&quot;&gt;Creation and Usage of Function&lt;/h2&gt;
&lt;h3 id=&quot;function&quot;&gt;Function&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Re-usage of code
    &lt;ul&gt;
      &lt;li&gt;Independently separate code that is reused -&amp;gt; event, graph, function, macro, and etc.&lt;/li&gt;
      &lt;li&gt;function: similar to an event graph&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How to use function
    &lt;ul&gt;
      &lt;li&gt;Add: Add function from ‘My blueprint’ tab&lt;/li&gt;
      &lt;li&gt;Make node network for each function&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;function-vs-event-graph&quot;&gt;Function vs. Event Graph&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Make node network from the grid&lt;/li&gt;
  &lt;li&gt;Availability of return value&lt;/li&gt;
  &lt;li&gt;Availability of latent action or timeline function&lt;/li&gt;
  &lt;li&gt;Availability of local variable&lt;/li&gt;
  &lt;li&gt;Number of entry point&lt;/li&gt;
  &lt;li&gt;Guidance for separation
    &lt;ul&gt;
      &lt;li&gt;You do not need to be strict&lt;/li&gt;
      &lt;li&gt;If it is hard to choose, just make an custom event first&lt;/li&gt;
      &lt;li&gt;If there is a need for return value, make it into a function&lt;/li&gt;
      &lt;li&gt;If there is a no need for latent action or timeline, make it into a function&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;conditional-expression&quot;&gt;Conditional Expression&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Flow control node
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Branch&lt;/strong&gt; node&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Conditional node: examine the input value and output true or false
    &lt;ul&gt;
      &lt;li&gt;condition
        &lt;ul&gt;
          &lt;li&gt;node: &amp;gt;, &amp;lt;. &amp;gt;=, &amp;lt;=, ==, !=&lt;/li&gt;
          &lt;li&gt;node: AND, OR&amp;lt; XOR, NAND, NOR, NOT&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Entertainment Software Lecture by &lt;a href=&quot;https://www.inu.ac.kr/user/indexSub.do?codyMenuSeq=1282578&amp;amp;siteId=isis&amp;amp;dum=dum&amp;amp;command=empDetail&amp;amp;empNum=24008&amp;amp;empSearchTab=01&amp;amp;deptCode=&amp;amp;siteId=isis&quot; target=&quot;_blank&quot;&gt;Jongseung Park&lt;/a&gt; in &lt;a href=&quot;https://www.inu.ac.kr/&quot; target=&quot;_blank&quot;&gt;Incheon National University&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9788968482809&quot; target=&quot;_blank&quot;&gt;실전 게임 제작으로 배우는 언리얼 엔진 4 by 윤인성&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9791156005896&quot; target=&quot;_blank&quot;&gt;언리얼 게임개봘과 시뮬레이션 by 박종승, 오경수&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.unrealengine.com/4.27/en-US/&quot;&gt;Unreal Engine Document&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>nogamsung</name>
        
        
      </author>

      

      
        <category term="etc" />
      

      
        <summary type="html">Create Variable and Variables types Create variable Add variable from my blueprint panel Frequently used variable types Boolean: True/False Integer Float Vector: X, Y, and Z float type structure String Object Type Variable Types Variables have its own color assigned to it Object type may not be compatible even though it has the same color</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Unreal Engine - Custom Event and Event Dispatcher</title>
      <link href="/Unreal_Engine-Actor_Spawn_and_Respawn" rel="alternate" type="text/html" title="Unreal Engine - Custom Event and Event Dispatcher" />
      <published>2022-10-04T01:30:00+09:00</published>
      <updated>2022-10-04T01:30:00+09:00</updated>
      <id>/Unreal_Engine-Actor_Spawn_and_Respawn</id>
      <content type="html" xml:base="/Unreal_Engine-Actor_Spawn_and_Respawn">&lt;h2 id=&quot;spawn-and-respawn&quot;&gt;Spawn and Respawn&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Dynamically spawn an object
    &lt;ul&gt;
      &lt;li&gt;Once located in a map, it is static, meaning it does not move&lt;/li&gt;
      &lt;li&gt;Object that dynamically appear and disappear
        &lt;ul&gt;
          &lt;li&gt;Item that is collected should disappear&lt;/li&gt;
          &lt;li&gt;Cannon should disappear after it is launched from a cannon shooter&lt;/li&gt;
          &lt;li&gt;Enemy should constantly &lt;strong&gt;spawn&lt;/strong&gt;&lt;/li&gt;
          &lt;li&gt;Player should &lt;strong&gt;respawn&lt;/strong&gt; after death&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Spawn and Respawn
    &lt;ul&gt;
      &lt;li&gt;Spawn: Object such as character or item that spawns dynamically&lt;/li&gt;
      &lt;li&gt;Respawn: Character that respawns after death&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;actor-spawning&quot;&gt;Actor Spawning&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Location fixed with a constant is not flexible&lt;/li&gt;
  &lt;li&gt;Location information must have an actor&lt;/li&gt;
  &lt;li&gt;Location can be adjusted using a mouse&lt;/li&gt;
  &lt;li&gt;A typical actor: “Target Point” actor, “Player starter” actor, …&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;implementation&quot;&gt;Implementation&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Actor spawning
    &lt;ul&gt;
      &lt;li&gt;SpawnActor from Class&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Transform
    &lt;ul&gt;
      &lt;li&gt;transform matrix&lt;/li&gt;
      &lt;li&gt;Location + Rotation + Scale&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Extract actor’s transform
    &lt;ul&gt;
      &lt;li&gt;GetActorTransform&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;destroy&quot;&gt;Destroy&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Unnecessary actors
    &lt;ul&gt;
      &lt;li&gt;Resources(CPU, Memory) must not be wasted&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Way to delete an actor
    &lt;ul&gt;
      &lt;li&gt;Destroy Actor&lt;/li&gt;
      &lt;li&gt;Using lifespan property&lt;/li&gt;
      &lt;li&gt;Using kill Z property&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;using-timer&quot;&gt;Using Timer&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Using timer
    &lt;ul&gt;
      &lt;li&gt;After the specified time, the subroutine is called&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Two types of timer function
    &lt;ul&gt;
      &lt;li&gt;Utilities &amp;gt; Timer &amp;gt; ‘&lt;strong&gt;Set Timer by Function Name&lt;/strong&gt;’&lt;/li&gt;
      &lt;li&gt;Utilities &amp;gt; Timer &amp;gt; ‘&lt;strong&gt;Set Timer by Event&lt;/strong&gt;’ (Recommended)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Timer function input
    &lt;ul&gt;
      &lt;li&gt;Function Name: Function / Custom event name string&lt;/li&gt;
      &lt;li&gt;Event = Connect delegate pin&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Time&lt;/strong&gt;: Wait time in seconds&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Looping&lt;/strong&gt;: Called every specified time
        &lt;ul&gt;
          &lt;li&gt;you can use other actions such as &lt;em&gt;ResetTimer&lt;/em&gt;, &lt;em&gt;UnsetTimer&lt;/em&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Return Value&lt;/strong&gt;: Timer handle returns&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Other timer related function
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Clear and Invalidate Timer by Handle&lt;/strong&gt;: Deletes an infinite loop timer&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Get Timer Elapsed(Remaining) Time by Handle&lt;/strong&gt;: Returns remaining time&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Paused(Unpaused) Timer by Handle&lt;/strong&gt;: Pauses a timer&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;using-hit-event&quot;&gt;Using Hit Event&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;If the collision occurs in block form, not overlap, the default event does not occur&lt;/li&gt;
  &lt;li&gt;When block form of collision event occurs:
    &lt;ul&gt;
      &lt;li&gt;Check ‘Simulation Generates Hit Events’ in the component’s detail tab&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Callback function
    &lt;ul&gt;
      &lt;li&gt;Add the ‘OnComponentHit’ to the specific component to event node in the node graph&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Callback function in actor metrics
    &lt;ul&gt;
      &lt;li&gt;Add the ‘OnActorHit’ to the specific instance to event node in the node graph&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pawn-and-controller&quot;&gt;Pawn and Controller&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Difference between Pawn and Controller
    &lt;ul&gt;
      &lt;li&gt;Pawn: An existence, such as player or AI, in the world that has physical shape&lt;/li&gt;
      &lt;li&gt;Controller: Controller class that manages a pawn
        &lt;ul&gt;
          &lt;li&gt;Human Player or Computer Player(AI)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;When a game starts, the specified &lt;strong&gt;pawn&lt;/strong&gt; and &lt;strong&gt;controller&lt;/strong&gt; is auto-generated
        &lt;ul&gt;
          &lt;li&gt;Controller is not visible but it is auto-generated(you can see it in the outliner)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Input Event Process
    &lt;ul&gt;
      &lt;li&gt;General way: Controller gets the input and applies to the pawn&lt;/li&gt;
      &lt;li&gt;Simple implementation way: Pawn itself gets the input and controls itself&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pawns-response&quot;&gt;Pawn’s Response&lt;/h2&gt;
&lt;h4 id=&quot;pawns-response-1&quot;&gt;Pawn’s response&lt;/h4&gt;
&lt;p&gt;After pawn is destroyed, the pawn must respawn in the specified place to replay. However, the pawn’s controller does not
disappear. Therefore, when the pawn respawn, the original controller must be reconnected.&lt;/p&gt;

&lt;h4 id=&quot;pawn-and-controller-connection&quot;&gt;Pawn and Controller Connection&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Pawn and Controller should have one to one connection&lt;/li&gt;
  &lt;li&gt;In order for the controller to Possess a different pawn, it must UnPossess first&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;event-binding&quot;&gt;Event binding&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Respawning after a player disappear
    &lt;ul&gt;
      &lt;li&gt;Define a custom event so the player’s pawn will respawn&lt;/li&gt;
      &lt;li&gt;Make it so the event is called when the pawn is destroyed&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Event binding
    &lt;ul&gt;
      &lt;li&gt;Event bind OnDestroyed to the respawn event&lt;/li&gt;
      &lt;li&gt;However, pawn level is not placed, it is created upon it runs&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Entertainment Software Lecture by &lt;a href=&quot;https://www.inu.ac.kr/user/indexSub.do?codyMenuSeq=1282578&amp;amp;siteId=isis&amp;amp;dum=dum&amp;amp;command=empDetail&amp;amp;empNum=24008&amp;amp;empSearchTab=01&amp;amp;deptCode=&amp;amp;siteId=isis&quot; target=&quot;_blank&quot;&gt;Jongseung Park&lt;/a&gt; in &lt;a href=&quot;https://www.inu.ac.kr/&quot; target=&quot;_blank&quot;&gt;Incheon National University&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9788968482809&quot; target=&quot;_blank&quot;&gt;실전 게임 제작으로 배우는 언리얼 엔진 4 by 윤인성&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9791156005896&quot; target=&quot;_blank&quot;&gt;언리얼 게임개봘과 시뮬레이션 by 박종승, 오경수&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>nogamsung</name>
        
        
      </author>

      

      
        <category term="etc" />
      

      
        <summary type="html">Spawn and Respawn Dynamically spawn an object Once located in a map, it is static, meaning it does not move Object that dynamically appear and disappear Item that is collected should disappear Cannon should disappear after it is launched from a cannon shooter Enemy should constantly spawn Player should respawn after death Spawn and Respawn Spawn: Object such as character or item that spawns dynamically Respawn: Character that respawns after death</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Graduation Project - First Project</title>
      <link href="/Graduation_Project-First_Project" rel="alternate" type="text/html" title="Graduation Project - First Project" />
      <published>2022-09-29T00:00:00+09:00</published>
      <updated>2022-09-29T00:00:00+09:00</updated>
      <id>/Graduation_Project-First_Project</id>
      <content type="html" xml:base="/Graduation_Project-First_Project">&lt;h2 id=&quot;what-is-capstone-design&quot;&gt;What is Capstone Design?&lt;/h2&gt;

&lt;p&gt;I currently attend Incheon National University located in Incheon, South Korea. Upon graduation, the university requires
all of its student to make a software program.&lt;/p&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;</content>

      
      
      
      
      

      <author>
          <name>nogamsung</name>
        
        
      </author>

      

      
        <category term="etc" />
      

      
        <summary type="html">What is Capstone Design?</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Unreal Engine - Custom Event and Event Dispatcher</title>
      <link href="/Unreal_Engine-Custom_Event_and_Event_Dispatcher" rel="alternate" type="text/html" title="Unreal Engine - Custom Event and Event Dispatcher" />
      <published>2022-09-28T19:30:00+09:00</published>
      <updated>2022-09-28T19:30:00+09:00</updated>
      <id>/Unreal_Engine-Custom_Event_and_Event_Dispatcher</id>
      <content type="html" xml:base="/Unreal_Engine-Custom_Event_and_Event_Dispatcher">&lt;h2 id=&quot;event-node&quot;&gt;Event Node&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Event Based Structure
    &lt;ul&gt;
      &lt;li&gt;Game engine detects multiple events(input, collision, etc.) and notify them by the blueprint&lt;/li&gt;
      &lt;li&gt;Therefore, blueprint is the flow of event process&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Category of Events
    &lt;ul&gt;
      &lt;li&gt;Basic events&lt;/li&gt;
      &lt;li&gt;Input event&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Event Node
    &lt;ul&gt;
      &lt;li&gt;Event node = Node called when a specific event occurs&lt;/li&gt;
      &lt;li&gt;Therefore, event node = first node, a special node, in a node network that flows according to the script coding&lt;/li&gt;
      &lt;li&gt;Blueprint script coding is writing out various events in the event network&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;custom-event-node&quot;&gt;Custom Event Node&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Custom Event Node
    &lt;ul&gt;
      &lt;li&gt;You need be able to make a specific event node&lt;/li&gt;
      &lt;li&gt;The event node that is defined by a user is &lt;strong&gt;custom event&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Calling Custom Event
    &lt;ul&gt;
      &lt;li&gt;Think of the event as a function&lt;/li&gt;
      &lt;li&gt;“Custom event” is the same as “custom function”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;event-dispatcher&quot;&gt;Event Dispatcher&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Event Dispatcher: Communication between actors
    &lt;ul&gt;
      &lt;li&gt;The method used by an actor to communicate with other actors&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Procedure for Usage
    &lt;ol&gt;
      &lt;li&gt;Make an object that &lt;strong&gt;event dispatcher&lt;/strong&gt; owned by an actor to notify an event&lt;/li&gt;
      &lt;li&gt;Other actors that listens to the event dispatcher subscribe themselves&lt;/li&gt;
      &lt;li&gt;Actor orders the event dispatcher to send which would notify all the actors that are subscribed&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Entertainment Software Lecture by &lt;a href=&quot;https://www.inu.ac.kr/user/indexSub.do?codyMenuSeq=1282578&amp;amp;siteId=isis&amp;amp;dum=dum&amp;amp;command=empDetail&amp;amp;empNum=24008&amp;amp;empSearchTab=01&amp;amp;deptCode=&amp;amp;siteId=isis&quot; target=&quot;_blank&quot;&gt;Jongseung Park&lt;/a&gt; in &lt;a href=&quot;https://www.inu.ac.kr/&quot; target=&quot;_blank&quot;&gt;Incheon National University&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9788968482809&quot; target=&quot;_blank&quot;&gt;실전 게임 제작으로 배우는 언리얼 엔진 4 by 윤인성&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9791156005896&quot; target=&quot;_blank&quot;&gt;언리얼 게임개봘과 시뮬레이션 by 박종승, 오경수&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>nogamsung</name>
        
        
      </author>

      

      
        <category term="etc" />
      

      
        <summary type="html">Event Node Event Based Structure Game engine detects multiple events(input, collision, etc.) and notify them by the blueprint Therefore, blueprint is the flow of event process Category of Events Basic events Input event Event Node Event node = Node called when a specific event occurs Therefore, event node = first node, a special node, in a node network that flows according to the script coding Blueprint script coding is writing out various events in the event network</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Unreal Engine - Trigger</title>
      <link href="/Unreal_Engine-Trigger" rel="alternate" type="text/html" title="Unreal Engine - Trigger" />
      <published>2022-09-27T02:00:00+09:00</published>
      <updated>2022-09-27T02:00:00+09:00</updated>
      <id>/Unreal_Engine-Trigger</id>
      <content type="html" xml:base="/Unreal_Engine-Trigger">&lt;h2 id=&quot;collision-detection-using-interaction&quot;&gt;Collision Detection using Interaction&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Game is interactive content, therefore it must have interactive factor&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Collision&lt;/strong&gt; in game: basic interactive implementation method
    &lt;ul&gt;
      &lt;li&gt;Collision check with two cars: physical collision&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Collision in UE
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Block&lt;/strong&gt;: Ban physical pass through&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Overlap&lt;/strong&gt;: Detect overlap without any physical measures&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;trigger&quot;&gt;Trigger&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Trigger&lt;/strong&gt;: Volume to make use of overlap
    &lt;ul&gt;
      &lt;li&gt;Actor that can be located in level&lt;/li&gt;
      &lt;li&gt;No physical looks and irrelevant with movement&lt;/li&gt;
      &lt;li&gt;Can implement interaction&lt;/li&gt;
      &lt;li&gt;Default supported trigger category: box trigger, sphere trigger, capsule trigger&lt;/li&gt;
      &lt;li&gt;Event trigger: &lt;strong&gt;OnActorBeginOverlap&lt;/strong&gt; / &lt;strong&gt;OnActorEndOverlap&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Procedure to use trigger
    &lt;ol&gt;
      &lt;li&gt;Place trigger act on a level&lt;/li&gt;
      &lt;li&gt;Add &lt;strong&gt;OnActorBeginOverlap&lt;/strong&gt; / &lt;strong&gt;OnActorEndOverlap&lt;/strong&gt; event for placed trigger action instance&lt;/li&gt;
      &lt;li&gt;Fill out the event graph on the &lt;em&gt;level blueprint&lt;/em&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;collision-component&quot;&gt;Collision Component&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Collision Component&lt;/strong&gt;: Component that is used for the purpose of overlap
    &lt;ul&gt;
      &lt;li&gt;Trigger is an actor that can be placed in a level, it does not internally include collision component&lt;/li&gt;
      &lt;li&gt;You can add collision component to a general actor for trigger purpose&lt;/li&gt;
      &lt;li&gt;Collision component event: &lt;strong&gt;OnComponentBeginOverlap&lt;/strong&gt; / &lt;strong&gt;OnComponentEndOverlap&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Procedure to use &lt;strong&gt;Collision component&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;Add a collision component to an actor&lt;/li&gt;
      &lt;li&gt;Add &lt;strong&gt;OnComponentBeginOverlap&lt;/strong&gt; / &lt;strong&gt;OnComponentEndOverlap&lt;/strong&gt; event to the added collision component&lt;/li&gt;
      &lt;li&gt;Fill out the event graph on the &lt;strong&gt;blueprint class&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;Place the actor to the level&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Entertainment Software Lecture by &lt;a href=&quot;https://www.inu.ac.kr/user/indexSub.do?codyMenuSeq=1282578&amp;amp;siteId=isis&amp;amp;dum=dum&amp;amp;command=empDetail&amp;amp;empNum=24008&amp;amp;empSearchTab=01&amp;amp;deptCode=&amp;amp;siteId=isis&quot; target=&quot;_blank&quot;&gt;Jongseung Park&lt;/a&gt; in &lt;a href=&quot;https://www.inu.ac.kr/&quot; target=&quot;_blank&quot;&gt;Incheon National University&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9788968482809&quot; target=&quot;_blank&quot;&gt;실전 게임 제작으로 배우는 언리얼 엔진 4 by 윤인성&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9791156005896&quot; target=&quot;_blank&quot;&gt;언리얼 게임개봘과 시뮬레이션 by 박종승, 오경수&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>nogamsung</name>
        
        
      </author>

      

      
        <category term="etc" />
      

      
        <summary type="html">Collision Detection using Interaction</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Unreal Engine - Input Process</title>
      <link href="/Unreal_Engine-Input_Process" rel="alternate" type="text/html" title="Unreal Engine - Input Process" />
      <published>2022-09-21T20:15:00+09:00</published>
      <updated>2022-09-21T20:15:00+09:00</updated>
      <id>/Unreal_Engine-Input_Process</id>
      <content type="html" xml:base="/Unreal_Engine-Input_Process">&lt;h2 id=&quot;input-process&quot;&gt;Input Process&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Game must be interactive: A user must be able to input control&lt;/li&gt;
  &lt;li&gt;Most of the input process method including UE is event driven
    &lt;ul&gt;
      &lt;li&gt;First, event input must be defined&lt;/li&gt;
      &lt;li&gt;Next, when this event occurs, a callback function that process the task must be implemented&lt;/li&gt;
      &lt;li&gt;Next, the callback function must be bind to the event&lt;/li&gt;
      &lt;li&gt;When it runs, the callback function must be automatically called when the event occurs&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;hardware-input&quot;&gt;Hardware Input&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Hardware input
    &lt;ul&gt;
      &lt;li&gt;Keyboard: keyboard, smartphone/tablet touch input, accelerator sensor input&lt;/li&gt;
      &lt;li&gt;Gamepad: PS, Xbox&lt;/li&gt;
      &lt;li&gt;Mouse, mouse movement, scroll&lt;/li&gt;
      &lt;li&gt;Smartphone sensor event: touch, accelerator, spin speed, gravity&lt;/li&gt;
      &lt;li&gt;HMD: Oculus Rift&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;input-mapping&quot;&gt;Input mapping&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Primary input function
    &lt;ul&gt;
      &lt;li&gt;Player’s movement, player camera’s spin&lt;/li&gt;
      &lt;li&gt;Player’s action&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Input mapping
    &lt;ul&gt;
      &lt;li&gt;When a player hardware input is triggered, it understands and transforms into a data&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pros
    &lt;ul&gt;
      &lt;li&gt;Use a single logic for multiple devices&lt;/li&gt;
      &lt;li&gt;Game logic&lt;/li&gt;
      &lt;li&gt;Easy spec change&lt;/li&gt;
      &lt;li&gt;Convenient key settings and button settings&lt;/li&gt;
      &lt;li&gt;C++ or blueprint readability increases&lt;/li&gt;
      &lt;li&gt;Transformable digital input and virtual analog input&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;input-event&quot;&gt;Input event&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Two types of input
    &lt;ul&gt;
      &lt;li&gt;Digital input: There are two settings of input which are “on” and “off”
        &lt;ul&gt;
          &lt;li&gt;keyboard key, gamepad, mouse button, etc.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Analog input: Input value has multiple stages
        &lt;ul&gt;
          &lt;li&gt;Mouse movement distance, Analog stick of a gamepad, etc.&lt;/li&gt;
          &lt;li&gt;Most input are expressed in “float”&lt;/li&gt;
          &lt;li&gt;The opposite direction is expressed with negative value&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Input mapping types
    &lt;ul&gt;
      &lt;li&gt;Action mapping: Digital input event&lt;/li&gt;
      &lt;li&gt;Axis mapping: Analog input event&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Category of events
    &lt;ul&gt;
      &lt;li&gt;Begin Play, Tick event&lt;/li&gt;
      &lt;li&gt;Input event&lt;/li&gt;
      &lt;li&gt;etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Entertainment Software Lecture by &lt;a href=&quot;https://www.inu.ac.kr/user/indexSub.do?codyMenuSeq=1282578&amp;amp;siteId=isis&amp;amp;dum=dum&amp;amp;command=empDetail&amp;amp;empNum=24008&amp;amp;empSearchTab=01&amp;amp;deptCode=&amp;amp;siteId=isis&quot; target=&quot;_blank&quot;&gt;Jongseung Park&lt;/a&gt; in &lt;a href=&quot;https://www.inu.ac.kr/&quot; target=&quot;_blank&quot;&gt;Incheon National University&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9788968482809&quot; target=&quot;_blank&quot;&gt;실전 게임 제작으로 배우는 언리얼 엔진 4 by 윤인성&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9791156005896&quot; target=&quot;_blank&quot;&gt;언리얼 게임개봘과 시뮬레이션 by 박종승, 오경수&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>nogamsung</name>
        
        
      </author>

      

      
        <category term="etc" />
      

      
        <summary type="html">Input Process</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Unreal Engine - Blueprint Script</title>
      <link href="/Unreal_Engine-Blueprint_Script" rel="alternate" type="text/html" title="Unreal Engine - Blueprint Script" />
      <published>2022-09-21T19:30:00+09:00</published>
      <updated>2022-09-21T19:30:00+09:00</updated>
      <id>/Unreal_Engine-Blueprint_Script</id>
      <content type="html" xml:base="/Unreal_Engine-Blueprint_Script">&lt;h2 id=&quot;blueprint&quot;&gt;Blueprint&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Class
    &lt;ul&gt;
      &lt;li&gt;Object is implemented in a class form (C++, Java, C#, and etc.)&lt;/li&gt;
      &lt;li&gt;In UE, Object is implemented in C++ class -&amp;gt; &lt;strong&gt;C++ Class&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Blueprint class
    &lt;ul&gt;
      &lt;li&gt;In UE, you can implement blueprint object -&amp;gt; &lt;strong&gt;Blueprint class&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;Blueprint class that is implemented is a single asset and is saved as a independent asset file&lt;/li&gt;
      &lt;li&gt;Blueprint class is reusable in different levels&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Level blueprint
    &lt;ul&gt;
      &lt;li&gt;Level blueprint
        &lt;ul&gt;
          &lt;li&gt;Blueprint saved with the map&lt;/li&gt;
          &lt;li&gt;A specific scenario can be shown using an actor located in the map, or express a equipment&lt;/li&gt;
          &lt;li&gt;It is subordinate to a single map, not reusable in different map&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Blueprint class
        &lt;ul&gt;
          &lt;li&gt;Asset&lt;/li&gt;
          &lt;li&gt;Reusable in different maps&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Entertainment Software Lecture by &lt;a href=&quot;https://www.inu.ac.kr/user/indexSub.do?codyMenuSeq=1282578&amp;amp;siteId=isis&amp;amp;dum=dum&amp;amp;command=empDetail&amp;amp;empNum=24008&amp;amp;empSearchTab=01&amp;amp;deptCode=&amp;amp;siteId=isis&quot; target=&quot;_blank&quot;&gt;Jongseung Park&lt;/a&gt; in &lt;a href=&quot;https://www.inu.ac.kr/&quot; target=&quot;_blank&quot;&gt;Incheon National University&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9788968482809&quot; target=&quot;_blank&quot;&gt;실전 게임 제작으로 배우는 언리얼 엔진 4 by 윤인성&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9791156005896&quot; target=&quot;_blank&quot;&gt;언리얼 게임개봘과 시뮬레이션 by 박종승, 오경수&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>nogamsung</name>
        
        
      </author>

      

      
        <category term="etc" />
      

      
        <summary type="html">Blueprint</summary>
      

      
      
    </entry>
  
</feed>
