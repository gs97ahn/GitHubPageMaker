<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="/tag/etc/feed.xml" rel="self" type="application/atom+xml" />
  <link href="/" rel="alternate" type="text/html" />
  <updated>2022-10-04T17:52:29+09:00</updated>
  <id>/tag/etc/feed.xml</id>

  
  
  

  
    <title type="html">nogamsung | </title>
  

  
    <subtitle>Computer Science &amp; Engineering</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Unreal Engine - Custom Event and Event Dispatcher</title>
      <link href="/Unreal_Engine-Actor_Spawn_and_Respawn" rel="alternate" type="text/html" title="Unreal Engine - Custom Event and Event Dispatcher" />
      <published>2022-10-04T01:30:00+09:00</published>
      <updated>2022-10-04T01:30:00+09:00</updated>
      <id>/Unreal_Engine-Actor_Spawn_and_Respawn</id>
      <content type="html" xml:base="/Unreal_Engine-Actor_Spawn_and_Respawn">&lt;h2 id=&quot;spawn-and-respawn&quot;&gt;Spawn and Respawn&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Dynamically spawn an object
    &lt;ul&gt;
      &lt;li&gt;Once located in a map, it is static, meaning it does not move&lt;/li&gt;
      &lt;li&gt;Object that dynamically appear and disappear
        &lt;ul&gt;
          &lt;li&gt;Item that is collected should disappear&lt;/li&gt;
          &lt;li&gt;Cannon should disappear after it is launched from a cannon shooter&lt;/li&gt;
          &lt;li&gt;Enemy should constantly &lt;strong&gt;spawn&lt;/strong&gt;&lt;/li&gt;
          &lt;li&gt;Player should &lt;strong&gt;respawn&lt;/strong&gt; after death&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Spawn and Respawn
    &lt;ul&gt;
      &lt;li&gt;Spawn: Object such as character or item that spawns dynamically&lt;/li&gt;
      &lt;li&gt;Respawn: Character that respawns after death&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;actor-spawning&quot;&gt;Actor Spawning&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Location fixed with a constant is not flexible&lt;/li&gt;
  &lt;li&gt;Location information must have an actor&lt;/li&gt;
  &lt;li&gt;Location can be adjusted using a mouse&lt;/li&gt;
  &lt;li&gt;A typical actor: “Target Point” actor, “Player starter” actor, …&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;implementation&quot;&gt;Implementation&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Actor spawning
    &lt;ul&gt;
      &lt;li&gt;SpawnActor from Class&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Transform
    &lt;ul&gt;
      &lt;li&gt;transform matrix&lt;/li&gt;
      &lt;li&gt;Location + Rotation + Scale&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Extract actor’s transform
    &lt;ul&gt;
      &lt;li&gt;GetActorTransform&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;destroy&quot;&gt;Destroy&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Unnecessary actors
    &lt;ul&gt;
      &lt;li&gt;Resources(CPU, Memory) must not be wasted&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Way to delete an actor
    &lt;ul&gt;
      &lt;li&gt;Destroy Actor&lt;/li&gt;
      &lt;li&gt;Using lifespan property&lt;/li&gt;
      &lt;li&gt;Using kill Z property&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;using-timer&quot;&gt;Using Timer&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Using timer
    &lt;ul&gt;
      &lt;li&gt;After the specified time, the subroutine is called&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Two types of timer function
    &lt;ul&gt;
      &lt;li&gt;Utilities &amp;gt; Timer &amp;gt; ‘&lt;strong&gt;Set Timer by Function Name&lt;/strong&gt;’&lt;/li&gt;
      &lt;li&gt;Utilities &amp;gt; Timer &amp;gt; ‘&lt;strong&gt;Set Timer by Event&lt;/strong&gt;’ (Recommended)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Timer function input
    &lt;ul&gt;
      &lt;li&gt;Function Name: Function / Custom event name string&lt;/li&gt;
      &lt;li&gt;Event = Connect delegate pin&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Time&lt;/strong&gt;: Wait time in seconds&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Looping&lt;/strong&gt;: Called every specified time
        &lt;ul&gt;
          &lt;li&gt;you can use other actions such as &lt;em&gt;ResetTimer&lt;/em&gt;, &lt;em&gt;UnsetTimer&lt;/em&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Return Value&lt;/strong&gt;: Timer handle returns&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Other timer related function
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Clear and Invalidate Timer by Handle&lt;/strong&gt;: Deletes an infinite loop timer&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Get Timer Elapsed(Remaining) Time by Handle&lt;/strong&gt;: Returns remaining time&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Paused(Unpaused) Timer by Handle&lt;/strong&gt;: Pauses a timer&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;using-hit-event&quot;&gt;Using Hit Event&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;If the collision occurs in block form, not overlap, the default event does not occur&lt;/li&gt;
  &lt;li&gt;When block form of collision event occurs:
    &lt;ul&gt;
      &lt;li&gt;Check ‘Simulation Generates Hit Events’ in the component’s detail tab&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Callback function
    &lt;ul&gt;
      &lt;li&gt;Add the ‘OnComponentHit’ to the specific component to event node in the node graph&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Callback function in actor metrics
    &lt;ul&gt;
      &lt;li&gt;Add the ‘OnActorHit’ to the specific instance to event node in the node graph&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pawn-and-controller&quot;&gt;Pawn and Controller&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Difference between Pawn and Controller
    &lt;ul&gt;
      &lt;li&gt;Pawn: An existence, such as player or AI, in the world that has physical shape&lt;/li&gt;
      &lt;li&gt;Controller: Controller class that manages a pawn
        &lt;ul&gt;
          &lt;li&gt;Human Player or Computer Player(AI)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;When a game starts, the specified &lt;strong&gt;pawn&lt;/strong&gt; and &lt;strong&gt;controller&lt;/strong&gt; is auto-generated
        &lt;ul&gt;
          &lt;li&gt;Controller is not visible but it is auto-generated(you can see it in the outliner)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Input Event Process
    &lt;ul&gt;
      &lt;li&gt;General way: Controller gets the input and applies to the pawn&lt;/li&gt;
      &lt;li&gt;Simple implementation way: Pawn itself gets the input and controls itself&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pawns-response&quot;&gt;Pawn’s Response&lt;/h2&gt;
&lt;h4 id=&quot;pawns-response-1&quot;&gt;Pawn’s response&lt;/h4&gt;
&lt;p&gt;After pawn is destroyed, the pawn must respawn in the specified place to replay. However, the pawn’s controller does not
disappear. Therefore, when the pawn respawn, the original controller must be reconnected.&lt;/p&gt;

&lt;h4 id=&quot;pawn-and-controller-connection&quot;&gt;Pawn and Controller Connection&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Pawn and Controller should have one to one connection&lt;/li&gt;
  &lt;li&gt;In order for the controller to Possess a different pawn, it must UnPossess first&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;event-binding&quot;&gt;Event binding&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Respawning after a player disappear
    &lt;ul&gt;
      &lt;li&gt;Define a custom event so the player’s pawn will respawn&lt;/li&gt;
      &lt;li&gt;Make it so the event is called when the pawn is destroyed&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Event binding
    &lt;ul&gt;
      &lt;li&gt;Event bind OnDestroyed to the respawn event&lt;/li&gt;
      &lt;li&gt;However, pawn level is not placed, it is created upon it runs&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Entertainment Software Lecture by &lt;a href=&quot;https://www.inu.ac.kr/user/indexSub.do?codyMenuSeq=1282578&amp;amp;siteId=isis&amp;amp;dum=dum&amp;amp;command=empDetail&amp;amp;empNum=24008&amp;amp;empSearchTab=01&amp;amp;deptCode=&amp;amp;siteId=isis&quot; target=&quot;_blank&quot;&gt;Jongseung Park&lt;/a&gt; in &lt;a href=&quot;https://www.inu.ac.kr/&quot; target=&quot;_blank&quot;&gt;Incheon National University&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9788968482809&quot; target=&quot;_blank&quot;&gt;실전 게임 제작으로 배우는 언리얼 엔진 4 by 윤인성&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9791156005896&quot; target=&quot;_blank&quot;&gt;언리얼 게임개봘과 시뮬레이션 by 박종승, 오경수&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>nogamsung</name>
        
        
      </author>

      

      
        <category term="etc" />
      

      
        <summary type="html">Spawn and Respawn Dynamically spawn an object Once located in a map, it is static, meaning it does not move Object that dynamically appear and disappear Item that is collected should disappear Cannon should disappear after it is launched from a cannon shooter Enemy should constantly spawn Player should respawn after death Spawn and Respawn Spawn: Object such as character or item that spawns dynamically Respawn: Character that respawns after death</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Graduation Project - First Project</title>
      <link href="/Graduation_Project-First_Project" rel="alternate" type="text/html" title="Graduation Project - First Project" />
      <published>2022-09-29T00:00:00+09:00</published>
      <updated>2022-09-29T00:00:00+09:00</updated>
      <id>/Graduation_Project-First_Project</id>
      <content type="html" xml:base="/Graduation_Project-First_Project">&lt;h2 id=&quot;capstone-design&quot;&gt;Capstone Design&lt;/h2&gt;

&lt;p&gt;I currently attend Incheon National University located in Incheon, South Korea. I am&lt;/p&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Entertainment Software Lecture by &lt;a href=&quot;https://www.inu.ac.kr/user/indexSub.do?codyMenuSeq=1282578&amp;amp;siteId=isis&amp;amp;dum=dum&amp;amp;command=empDetail&amp;amp;empNum=24008&amp;amp;empSearchTab=01&amp;amp;deptCode=&amp;amp;siteId=isis&quot; target=&quot;_blank&quot;&gt;Jongseung Park&lt;/a&gt; in &lt;a href=&quot;https://www.inu.ac.kr/&quot; target=&quot;_blank&quot;&gt;Incheon National University&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>nogamsung</name>
        
        
      </author>

      

      
        <category term="etc" />
      

      
        <summary type="html">Capstone Design</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Unreal Engine - Custom Event and Event Dispatcher</title>
      <link href="/Unreal_Engine-Custom_Event_and_Event_Dispatcher" rel="alternate" type="text/html" title="Unreal Engine - Custom Event and Event Dispatcher" />
      <published>2022-09-28T19:30:00+09:00</published>
      <updated>2022-09-28T19:30:00+09:00</updated>
      <id>/Unreal_Engine-Custom_Event_and_Event_Dispatcher</id>
      <content type="html" xml:base="/Unreal_Engine-Custom_Event_and_Event_Dispatcher">&lt;h2 id=&quot;event-node&quot;&gt;Event Node&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Event Based Structure
    &lt;ul&gt;
      &lt;li&gt;Game engine detects multiple events(input, collision, etc.) and notify them by the blueprint&lt;/li&gt;
      &lt;li&gt;Therefore, blueprint is the flow of event process&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Category of Events
    &lt;ul&gt;
      &lt;li&gt;Basic events&lt;/li&gt;
      &lt;li&gt;Input event&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Event Node
    &lt;ul&gt;
      &lt;li&gt;Event node = Node called when a specific event occurs&lt;/li&gt;
      &lt;li&gt;Therefore, event node = first node, a special node, in a node network that flows according to the script coding&lt;/li&gt;
      &lt;li&gt;Blueprint script coding is writing out various events in the event network&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;custom-event-node&quot;&gt;Custom Event Node&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Custom Event Node
    &lt;ul&gt;
      &lt;li&gt;You need be able to make a specific event node&lt;/li&gt;
      &lt;li&gt;The event node that is defined by a user is &lt;strong&gt;custom event&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Calling Custom Event
    &lt;ul&gt;
      &lt;li&gt;Think of the event as a function&lt;/li&gt;
      &lt;li&gt;“Custom event” is the same as “custom function”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;event-dispatcher&quot;&gt;Event Dispatcher&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Event Dispatcher: Communication between actors
    &lt;ul&gt;
      &lt;li&gt;The method used by an actor to communicate with other actors&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Procedure for Usage
    &lt;ol&gt;
      &lt;li&gt;Make an object that &lt;strong&gt;event dispatcher&lt;/strong&gt; owned by an actor to notify an event&lt;/li&gt;
      &lt;li&gt;Other actors that listens to the event dispatcher subscribe themselves&lt;/li&gt;
      &lt;li&gt;Actor orders the event dispatcher to send which would notify all the actors that are subscribed&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Entertainment Software Lecture by &lt;a href=&quot;https://www.inu.ac.kr/user/indexSub.do?codyMenuSeq=1282578&amp;amp;siteId=isis&amp;amp;dum=dum&amp;amp;command=empDetail&amp;amp;empNum=24008&amp;amp;empSearchTab=01&amp;amp;deptCode=&amp;amp;siteId=isis&quot; target=&quot;_blank&quot;&gt;Jongseung Park&lt;/a&gt; in &lt;a href=&quot;https://www.inu.ac.kr/&quot; target=&quot;_blank&quot;&gt;Incheon National University&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9788968482809&quot; target=&quot;_blank&quot;&gt;실전 게임 제작으로 배우는 언리얼 엔진 4 by 윤인성&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9791156005896&quot; target=&quot;_blank&quot;&gt;언리얼 게임개봘과 시뮬레이션 by 박종승, 오경수&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>nogamsung</name>
        
        
      </author>

      

      
        <category term="etc" />
      

      
        <summary type="html">Event Node Event Based Structure Game engine detects multiple events(input, collision, etc.) and notify them by the blueprint Therefore, blueprint is the flow of event process Category of Events Basic events Input event Event Node Event node = Node called when a specific event occurs Therefore, event node = first node, a special node, in a node network that flows according to the script coding Blueprint script coding is writing out various events in the event network</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Unreal Engine - Trigger</title>
      <link href="/Unreal_Engine-Trigger" rel="alternate" type="text/html" title="Unreal Engine - Trigger" />
      <published>2022-09-27T02:00:00+09:00</published>
      <updated>2022-09-27T02:00:00+09:00</updated>
      <id>/Unreal_Engine-Trigger</id>
      <content type="html" xml:base="/Unreal_Engine-Trigger">&lt;h2 id=&quot;collision-detection-using-interaction&quot;&gt;Collision Detection using Interaction&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Game is interactive content, therefore it must have interactive factor&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Collision&lt;/strong&gt; in game: basic interactive implementation method
    &lt;ul&gt;
      &lt;li&gt;Collision check with two cars: physical collision&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Collision in UE
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Block&lt;/strong&gt;: Ban physical pass through&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Overlap&lt;/strong&gt;: Detect overlap without any physical measures&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;trigger&quot;&gt;Trigger&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Trigger&lt;/strong&gt;: Volume to make use of overlap
    &lt;ul&gt;
      &lt;li&gt;Actor that can be located in level&lt;/li&gt;
      &lt;li&gt;No physical looks and irrelevant with movement&lt;/li&gt;
      &lt;li&gt;Can implement interaction&lt;/li&gt;
      &lt;li&gt;Default supported trigger category: box trigger, sphere trigger, capsule trigger&lt;/li&gt;
      &lt;li&gt;Event trigger: &lt;strong&gt;OnActorBeginOverlap&lt;/strong&gt; / &lt;strong&gt;OnActorEndOverlap&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Procedure to use trigger
    &lt;ol&gt;
      &lt;li&gt;Place trigger act on a level&lt;/li&gt;
      &lt;li&gt;Add &lt;strong&gt;OnActorBeginOverlap&lt;/strong&gt; / &lt;strong&gt;OnActorEndOverlap&lt;/strong&gt; event for placed trigger action instance&lt;/li&gt;
      &lt;li&gt;Fill out the event graph on the &lt;em&gt;level blueprint&lt;/em&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;collision-component&quot;&gt;Collision Component&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Collision Component&lt;/strong&gt;: Component that is used for the purpose of overlap
    &lt;ul&gt;
      &lt;li&gt;Trigger is an actor that can be placed in a level, it does not internally include collision component&lt;/li&gt;
      &lt;li&gt;You can add collision component to a general actor for trigger purpose&lt;/li&gt;
      &lt;li&gt;Collision component event: &lt;strong&gt;OnComponentBeginOverlap&lt;/strong&gt; / &lt;strong&gt;OnComponentEndOverlap&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Procedure to use &lt;strong&gt;Collision component&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;Add a collision component to an actor&lt;/li&gt;
      &lt;li&gt;Add &lt;strong&gt;OnComponentBeginOverlap&lt;/strong&gt; / &lt;strong&gt;OnComponentEndOverlap&lt;/strong&gt; event to the added collision component&lt;/li&gt;
      &lt;li&gt;Fill out the event graph on the &lt;strong&gt;blueprint class&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;Place the actor to the level&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Entertainment Software Lecture by &lt;a href=&quot;https://www.inu.ac.kr/user/indexSub.do?codyMenuSeq=1282578&amp;amp;siteId=isis&amp;amp;dum=dum&amp;amp;command=empDetail&amp;amp;empNum=24008&amp;amp;empSearchTab=01&amp;amp;deptCode=&amp;amp;siteId=isis&quot; target=&quot;_blank&quot;&gt;Jongseung Park&lt;/a&gt; in &lt;a href=&quot;https://www.inu.ac.kr/&quot; target=&quot;_blank&quot;&gt;Incheon National University&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9788968482809&quot; target=&quot;_blank&quot;&gt;실전 게임 제작으로 배우는 언리얼 엔진 4 by 윤인성&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9791156005896&quot; target=&quot;_blank&quot;&gt;언리얼 게임개봘과 시뮬레이션 by 박종승, 오경수&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>nogamsung</name>
        
        
      </author>

      

      
        <category term="etc" />
      

      
        <summary type="html">Collision Detection using Interaction</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Unreal Engine - Input Process</title>
      <link href="/Unreal_Engine-Input_Process" rel="alternate" type="text/html" title="Unreal Engine - Input Process" />
      <published>2022-09-21T20:15:00+09:00</published>
      <updated>2022-09-21T20:15:00+09:00</updated>
      <id>/Unreal_Engine-Input_Process</id>
      <content type="html" xml:base="/Unreal_Engine-Input_Process">&lt;h2 id=&quot;input-process&quot;&gt;Input Process&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Game must be interactive: A user must be able to input control&lt;/li&gt;
  &lt;li&gt;Most of the input process method including UE is event driven
    &lt;ul&gt;
      &lt;li&gt;First, event input must be defined&lt;/li&gt;
      &lt;li&gt;Next, when this event occurs, a callback function that process the task must be implemented&lt;/li&gt;
      &lt;li&gt;Next, the callback function must be bind to the event&lt;/li&gt;
      &lt;li&gt;When it runs, the callback function must be automatically called when the event occurs&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;hardware-input&quot;&gt;Hardware Input&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Hardware input
    &lt;ul&gt;
      &lt;li&gt;Keyboard: keyboard, smartphone/tablet touch input, accelerator sensor input&lt;/li&gt;
      &lt;li&gt;Gamepad: PS, Xbox&lt;/li&gt;
      &lt;li&gt;Mouse, mouse movement, scroll&lt;/li&gt;
      &lt;li&gt;Smartphone sensor event: touch, accelerator, spin speed, gravity&lt;/li&gt;
      &lt;li&gt;HMD: Oculus Rift&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;input-mapping&quot;&gt;Input mapping&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Primary input function
    &lt;ul&gt;
      &lt;li&gt;Player’s movement, player camera’s spin&lt;/li&gt;
      &lt;li&gt;Player’s action&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Input mapping
    &lt;ul&gt;
      &lt;li&gt;When a player hardware input is triggered, it understands and transforms into a data&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pros
    &lt;ul&gt;
      &lt;li&gt;Use a single logic for multiple devices&lt;/li&gt;
      &lt;li&gt;Game logic&lt;/li&gt;
      &lt;li&gt;Easy spec change&lt;/li&gt;
      &lt;li&gt;Convenient key settings and button settings&lt;/li&gt;
      &lt;li&gt;C++ or blueprint readability increases&lt;/li&gt;
      &lt;li&gt;Transformable digital input and virtual analog input&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;input-event&quot;&gt;Input event&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Two types of input
    &lt;ul&gt;
      &lt;li&gt;Digital input: There are two settings of input which are “on” and “off”
        &lt;ul&gt;
          &lt;li&gt;keyboard key, gamepad, mouse button, etc.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Analog input: Input value has multiple stages
        &lt;ul&gt;
          &lt;li&gt;Mouse movement distance, Analog stick of a gamepad, etc.&lt;/li&gt;
          &lt;li&gt;Most input are expressed in “float”&lt;/li&gt;
          &lt;li&gt;The opposite direction is expressed with negative value&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Input mapping types
    &lt;ul&gt;
      &lt;li&gt;Action mapping: Digital input event&lt;/li&gt;
      &lt;li&gt;Axis mapping: Analog input event&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Category of events
    &lt;ul&gt;
      &lt;li&gt;Begin Play, Tick event&lt;/li&gt;
      &lt;li&gt;Input event&lt;/li&gt;
      &lt;li&gt;etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Entertainment Software Lecture by &lt;a href=&quot;https://www.inu.ac.kr/user/indexSub.do?codyMenuSeq=1282578&amp;amp;siteId=isis&amp;amp;dum=dum&amp;amp;command=empDetail&amp;amp;empNum=24008&amp;amp;empSearchTab=01&amp;amp;deptCode=&amp;amp;siteId=isis&quot; target=&quot;_blank&quot;&gt;Jongseung Park&lt;/a&gt; in &lt;a href=&quot;https://www.inu.ac.kr/&quot; target=&quot;_blank&quot;&gt;Incheon National University&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9788968482809&quot; target=&quot;_blank&quot;&gt;실전 게임 제작으로 배우는 언리얼 엔진 4 by 윤인성&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9791156005896&quot; target=&quot;_blank&quot;&gt;언리얼 게임개봘과 시뮬레이션 by 박종승, 오경수&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>nogamsung</name>
        
        
      </author>

      

      
        <category term="etc" />
      

      
        <summary type="html">Input Process</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Unreal Engine - Blueprint Script</title>
      <link href="/Unreal_Engine-Blueprint_Script" rel="alternate" type="text/html" title="Unreal Engine - Blueprint Script" />
      <published>2022-09-21T19:30:00+09:00</published>
      <updated>2022-09-21T19:30:00+09:00</updated>
      <id>/Unreal_Engine-Blueprint_Script</id>
      <content type="html" xml:base="/Unreal_Engine-Blueprint_Script">&lt;h2 id=&quot;blueprint&quot;&gt;Blueprint&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Class
    &lt;ul&gt;
      &lt;li&gt;Object is implemented in a class form (C++, Java, C#, and etc.)&lt;/li&gt;
      &lt;li&gt;In UE, Object is implemented in C++ class -&amp;gt; &lt;strong&gt;C++ Class&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Blueprint class
    &lt;ul&gt;
      &lt;li&gt;In UE, you can implement blueprint object -&amp;gt; &lt;strong&gt;Blueprint class&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;Blueprint class that is implemented is a single asset and is saved as a independent asset file&lt;/li&gt;
      &lt;li&gt;Blueprint class is reusable in different levels&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Level blueprint
    &lt;ul&gt;
      &lt;li&gt;Level blueprint
        &lt;ul&gt;
          &lt;li&gt;Blueprint saved with the map&lt;/li&gt;
          &lt;li&gt;A specific scenario can be shown using an actor located in the map, or express a equipment&lt;/li&gt;
          &lt;li&gt;It is subordinate to a single map, not reusable in different map&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Blueprint class
        &lt;ul&gt;
          &lt;li&gt;Asset&lt;/li&gt;
          &lt;li&gt;Reusable in different maps&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Entertainment Software Lecture by &lt;a href=&quot;https://www.inu.ac.kr/user/indexSub.do?codyMenuSeq=1282578&amp;amp;siteId=isis&amp;amp;dum=dum&amp;amp;command=empDetail&amp;amp;empNum=24008&amp;amp;empSearchTab=01&amp;amp;deptCode=&amp;amp;siteId=isis&quot; target=&quot;_blank&quot;&gt;Jongseung Park&lt;/a&gt; in &lt;a href=&quot;https://www.inu.ac.kr/&quot; target=&quot;_blank&quot;&gt;Incheon National University&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9788968482809&quot; target=&quot;_blank&quot;&gt;실전 게임 제작으로 배우는 언리얼 엔진 4 by 윤인성&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9791156005896&quot; target=&quot;_blank&quot;&gt;언리얼 게임개봘과 시뮬레이션 by 박종승, 오경수&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>nogamsung</name>
        
        
      </author>

      

      
        <category term="etc" />
      

      
        <summary type="html">Blueprint</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Unreal Engine - Game Mode and Pawn</title>
      <link href="/Unreal_Engine-Game_Mode_and_Pawn" rel="alternate" type="text/html" title="Unreal Engine - Game Mode and Pawn" />
      <published>2022-09-20T01:30:00+09:00</published>
      <updated>2022-09-20T01:30:00+09:00</updated>
      <id>/Unreal_Engine-Game_Mode_and_Pawn</id>
      <content type="html" xml:base="/Unreal_Engine-Game_Mode_and_Pawn">&lt;h2 id=&quot;concept-of-class&quot;&gt;Concept of Class&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;What is &lt;strong&gt;Class&lt;/strong&gt;?
    &lt;ul&gt;
      &lt;li&gt;C++: expressed in object as it is an object-oriented language&lt;/li&gt;
      &lt;li&gt;Object is implemented in class&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Actor&lt;/strong&gt; is a part that is implemented in class&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;What is &lt;strong&gt;Blueprint&lt;/strong&gt;?
    &lt;ul&gt;
      &lt;li&gt;In Unreal Engine, you can use &lt;strong&gt;blueprint&lt;/strong&gt;, similar to C++, it is a visual script language&lt;/li&gt;
      &lt;li&gt;The blueprint is a C++ class internally&lt;/li&gt;
      &lt;li&gt;Therefore, C++ class and blueprint class is similar in characteristic&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Ways to implement class: C++ or Blueprint
    &lt;ul&gt;
      &lt;li&gt;The way it to implement is not essential&lt;/li&gt;
      &lt;li&gt;Categorized into &lt;strong&gt;C++ class&lt;/strong&gt; or &lt;strong&gt;blueprint class&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Example of Class
    &lt;ul&gt;
      &lt;li&gt;Object class, Actor class, pawn class, and so on&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;game-framework&quot;&gt;Game Framework&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Every game needs to have basic structure
    &lt;ul&gt;
      &lt;li&gt;Player character, player controller, camera, and so on&lt;/li&gt;
      &lt;li&gt;Even if you use an empty template, you need include a minimum game structure&lt;/li&gt;
      &lt;li&gt;The game structure in UE is “Game Framework”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Game Mode
    &lt;ul&gt;
      &lt;li&gt;Object that express the rules for a game to be played&lt;/li&gt;
      &lt;li&gt;Decides the player and camera in a map during the “Game Mode”&lt;/li&gt;
      &lt;li&gt;If it is not altered, the standard game mode is set to default&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;core-class&quot;&gt;Core Class&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Core classes in UE
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Object&lt;/strong&gt;: A class located at the top of all class, all of the classes are derived from this class.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Actor&lt;/strong&gt;: Place a class in level. It is a child class of an object.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Pawn&lt;/strong&gt;: A class that has a physical looks, such as player or A.I. It is child class of an actor.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Character&lt;/strong&gt;: A class that is able to walk or do any type of movement function. It is a child class of a pawn.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Player controller&lt;/strong&gt;: A class that controls a player’s pawn. It is a child class of an actor.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Game mode&lt;/strong&gt;: A class that express the rules for a game. It is a child class of an actor.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Name of the core class
    &lt;ul&gt;
      &lt;li&gt;Class is usually omitted. So just say object, actor, pawn, player controller, and character.&lt;/li&gt;
      &lt;li&gt;Name of the class implemented in C++: UObject, APawn, ACharacter, APlayerController, AGameMode&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;blueprint&quot;&gt;Blueprint&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;What is blueprint?
    &lt;ul&gt;
      &lt;li&gt;Visual script system provided by UE
        &lt;ul&gt;
          &lt;li&gt;Node based development environment that uses the mouse to connect commands.&lt;/li&gt;
          &lt;li&gt;Easy. -&amp;gt; All producers can participate in development.&lt;/li&gt;
          &lt;li&gt;Block assemble form that reduces the grammatical error.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Good when making interactive assets
        &lt;ul&gt;
          &lt;li&gt;Event process script&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Easy to combine various functions&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Making blueprint object
    &lt;ul&gt;
      &lt;li&gt;You can use C++ to make a class or use the blueprint.&lt;/li&gt;
      &lt;li&gt;Blueprint class is a powerful means&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;concept-of-component&quot;&gt;Concept of Component&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Component
    &lt;ul&gt;
      &lt;li&gt;A single blueprint class has many component inside a component container&lt;/li&gt;
      &lt;li&gt;Component is added to a blueprint class to act as a class&lt;/li&gt;
      &lt;li&gt;Different components do different tasks&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Types of component
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Actor component&lt;/strong&gt;: A base class component that does not have any transform data.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Scene Component&lt;/strong&gt;: A child class of an actor component that has transform data.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Primitive component&lt;/strong&gt;: A child class of a scene component that has graphic expression.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Entertainment Software Lecture by &lt;a href=&quot;https://www.inu.ac.kr/user/indexSub.do?codyMenuSeq=1282578&amp;amp;siteId=isis&amp;amp;dum=dum&amp;amp;command=empDetail&amp;amp;empNum=24008&amp;amp;empSearchTab=01&amp;amp;deptCode=&amp;amp;siteId=isis&quot; target=&quot;_blank&quot;&gt;Jongseung Park&lt;/a&gt; in &lt;a href=&quot;https://www.inu.ac.kr/&quot; target=&quot;_blank&quot;&gt;Incheon National University&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9788968482809&quot; target=&quot;_blank&quot;&gt;실전 게임 제작으로 배우는 언리얼 엔진 4 by 윤인성&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9791156005896&quot; target=&quot;_blank&quot;&gt;언리얼 게임개봘과 시뮬레이션 by 박종승, 오경수&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>nogamsung</name>
        
        
      </author>

      

      
        <category term="etc" />
      

      
        <summary type="html">Concept of Class</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Unreal Engine - Asset</title>
      <link href="/Unreal_Engine-Asset" rel="alternate" type="text/html" title="Unreal Engine - Asset" />
      <published>2022-09-15T19:30:00+09:00</published>
      <updated>2022-09-15T19:30:00+09:00</updated>
      <id>/Unreal_Engine-Asset</id>
      <content type="html" xml:base="/Unreal_Engine-Asset">&lt;h2 id=&quot;making-mesh&quot;&gt;Making Mesh&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;You can make mesh using &lt;a href=&quot;https://www.blender.org/support/tutorials/&quot; target=&quot;_blank&quot;&gt;blender&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;../../assets/screenshots/2022-09-14/screenshot-1.jpeg&quot; alt=&quot;screenshot-1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;importing-mesh&quot;&gt;Importing Mesh&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Import: Unreal Engine reads the format that is externally created
    &lt;ul&gt;
      &lt;li&gt;You must import the asset to the &lt;strong&gt;Content Browser&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;collision-volume&quot;&gt;Collision Volume&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;There are 2 types of collision volume
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Simple Collision&lt;/strong&gt; volume
        &lt;ul&gt;
          &lt;li&gt;box, sphere, capsule, and primitive like convex hull&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Complex Collision&lt;/strong&gt; volume
        &lt;ul&gt;
          &lt;li&gt;trimesh&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How to request collision test within Unreal Engine using &lt;strong&gt;PhysX&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;simple query: request simple collision test&lt;/li&gt;
      &lt;li&gt;complex query: request complex collision test&lt;/li&gt;
      &lt;li&gt;default action: simple query for simple collision and complex query for complex collision&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;../../assets/screenshots/2022-09-14/screenshot-2.jpeg&quot; alt=&quot;screenshot-2&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Entertainment Software Lecture by &lt;a href=&quot;https://www.inu.ac.kr/user/indexSub.do?codyMenuSeq=1282578&amp;amp;siteId=isis&amp;amp;dum=dum&amp;amp;command=empDetail&amp;amp;empNum=24008&amp;amp;empSearchTab=01&amp;amp;deptCode=&amp;amp;siteId=isis&quot; target=&quot;_blank&quot;&gt;Jongseung Park&lt;/a&gt; in &lt;a href=&quot;https://www.inu.ac.kr/&quot; target=&quot;_blank&quot;&gt;Incheon National University&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9788968482809&quot; target=&quot;_blank&quot;&gt;실전 게임 제작으로 배우는 언리얼 엔진 4 by 윤인성&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9791156005896&quot; target=&quot;_blank&quot;&gt;언리얼 게임개봘과 시뮬레이션 by 박종승, 오경수&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>nogamsung</name>
        
        
      </author>

      

      
        <category term="etc" />
      

      
        <summary type="html">Making Mesh</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Unreal Engine - Level Editor</title>
      <link href="/Unreal_Engine-Level_Edit" rel="alternate" type="text/html" title="Unreal Engine - Level Editor" />
      <published>2022-09-13T01:30:00+09:00</published>
      <updated>2022-09-13T01:30:00+09:00</updated>
      <id>/Unreal_Engine-Level_Edit</id>
      <content type="html" xml:base="/Unreal_Engine-Level_Edit">&lt;h2 id=&quot;the-general-sequence-of-game-programming&quot;&gt;The General Sequence of Game Programming&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Prototyping
    &lt;ul&gt;
      &lt;li&gt;Verify that the game that you are making has value&lt;/li&gt;
      &lt;li&gt;Use “greyboxing” to quickly construct maps
        &lt;ul&gt;
          &lt;li&gt;Do not worry about the design, quickly construct map to test playing&lt;/li&gt;
          &lt;li&gt;Afterwards, you need to change the mesh template to actual assets. This process is called “meshing”.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pre-production
    &lt;ul&gt;
      &lt;li&gt;A rehearsal stage to bring the level of game to production level&lt;/li&gt;
      &lt;li&gt;This is stage that proves the entire ‘workflow’ of the game.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Production
    &lt;ul&gt;
      &lt;li&gt;Finish the last bits for official deployment&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;making-simple-levels&quot;&gt;Making simple levels&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Look for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Engine Contents&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BasicShapes&lt;/code&gt; folder&lt;/li&gt;
  &lt;li&gt;Drag the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cube&lt;/code&gt; static mesh&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;play-modes&quot;&gt;Play modes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Selected Viewport Mode&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;It is a play mode in viewport&lt;/li&gt;
      &lt;li&gt;Quickly play to check everything&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Mobile Free View Mode&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Simulate the play in a mobile environment (The preparation time is slow)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;New Editor Screen (PIE) Mode&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Play in a new screen (The screen resolution and ratio that you set are applied)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Simulated Mode&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;It is not a mode to play, it is a mode to observe the levels
        &lt;ul&gt;
          &lt;li&gt;You can see all the screen view that a player would see, but not be able to perform any game related functions&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Use mouse and keyboard to look around the level freely
        &lt;ul&gt;
          &lt;li&gt;Conveniently place a particle effect or physical objects&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;making-levels-using-brush&quot;&gt;Making levels using brush&lt;/h2&gt;

&lt;p&gt;Brush is a tool provided by unreal for greyboxing&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Do not need to use external DCC and just use internal unreal editor tool to make mesh&lt;/li&gt;
  &lt;li&gt;Using ‘brush’ is not a common method to use
    &lt;ul&gt;
      &lt;li&gt;‘Static mesh’ is commonly used&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;However, brush is very convenient to use, so use it when you need it
    &lt;ul&gt;
      &lt;li&gt;Used to make the entire outline and it is replaced with static mesh afterwards&lt;/li&gt;
      &lt;li&gt;Early stage prototyping for test usage&lt;/li&gt;
      &lt;li&gt;It is also usable for final mesh&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Entertainment Software Lecture by &lt;a href=&quot;https://www.inu.ac.kr/user/indexSub.do?codyMenuSeq=1282578&amp;amp;siteId=isis&amp;amp;dum=dum&amp;amp;command=empDetail&amp;amp;empNum=24008&amp;amp;empSearchTab=01&amp;amp;deptCode=&amp;amp;siteId=isis&quot; target=&quot;_blank&quot;&gt;Jongseung Park&lt;/a&gt; in &lt;a href=&quot;https://www.inu.ac.kr/&quot; target=&quot;_blank&quot;&gt;Incheon National University&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9788968482809&quot; target=&quot;_blank&quot;&gt;실전 게임 제작으로 배우는 언리얼 엔진 4 by 윤인성&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9791156005896&quot; target=&quot;_blank&quot;&gt;언리얼 게임개봘과 시뮬레이션 by 박종승, 오경수&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>nogamsung</name>
        
        
      </author>

      

      
        <category term="etc" />
      

      
        <summary type="html">The General Sequence of Game Programming</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Unreal Engine - Level Editor</title>
      <link href="/Unreal_Engine-Level_Editor" rel="alternate" type="text/html" title="Unreal Engine - Level Editor" />
      <published>2022-09-06T01:30:00+09:00</published>
      <updated>2022-09-06T01:30:00+09:00</updated>
      <id>/Unreal_Engine-Level_Editor</id>
      <content type="html" xml:base="/Unreal_Engine-Level_Editor">&lt;h2 id=&quot;basic-terms&quot;&gt;Basic Terms&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Unreal Editor: Development environment for Unreal engine.&lt;/li&gt;
  &lt;li&gt;Level Editor: An interface used for the design and construction of game levels and environments.&lt;/li&gt;
  &lt;li&gt;Level: Made up of a collection of static meshes, volumes, lights, blueprints, and more all working together to
bring the desired experience to a player.&lt;/li&gt;
  &lt;li&gt;Asset: A piece of content for an Unreal project and can be thought of as a UObject serialized to a file.&lt;/li&gt;
  &lt;li&gt;Actor: Object in level such as a camera, static mesh, or player start location.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;default-interface&quot;&gt;Default Interface&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;../../assets/screenshots/2022-09-05/screenshot-9.png&quot; alt=&quot;screenshot-9&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;coordinates&quot;&gt;Coordinates&lt;/h2&gt;

&lt;p&gt;The coordinates follow &lt;em&gt;left hand rule&lt;/em&gt; as you may have learned in high school physics class.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;thumb: Points upward and represents the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;z-coordinate&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;index finger: Points towards and represents the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y-coordinate&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;middle finger: Points to the right and represents the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x-coordinate&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;camera-control-in-view-port&quot;&gt;Camera control in view port&lt;/h2&gt;

&lt;p&gt;Move the camera around using these keys:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;right click&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;w/s&lt;/code&gt;: move forward/backward&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;right click&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a/d&lt;/code&gt;: move left/right&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;right click&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;q/e&lt;/code&gt;: move upward/downward&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;right click&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;z/c&lt;/code&gt;: zoom out/in&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;left click&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drag&lt;/code&gt;: rotate left/right, move forward/backward horizontally&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;right click&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drag&lt;/code&gt;: rotate left/right/upwards/downwards&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wheel click&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drag&lt;/code&gt;: move left/right horizontally, move upwards/downwards in perpendicular&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;left click&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option/alt&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drag&lt;/code&gt;: move around centering a pivot&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;right click&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option/alt&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drag&lt;/code&gt;: move towards/away from a pivot&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wheel click&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;option/alt&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drag&lt;/code&gt;: move left/right horizontally and forward/backward in perpendicular&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select an object&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f&lt;/code&gt;: focus the object&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Entertainment Software Lecture by &lt;a href=&quot;https://www.inu.ac.kr/user/indexSub.do?codyMenuSeq=1282578&amp;amp;siteId=isis&amp;amp;dum=dum&amp;amp;command=empDetail&amp;amp;empNum=24008&amp;amp;empSearchTab=01&amp;amp;deptCode=&amp;amp;siteId=isis&quot; target=&quot;_blank&quot;&gt;Jongseung Park&lt;/a&gt; in &lt;a href=&quot;https://www.inu.ac.kr/&quot; target=&quot;_blank&quot;&gt;Incheon National University&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9788968482809&quot; target=&quot;_blank&quot;&gt;실전 게임 제작으로 배우는 언리얼 엔진 4 by 윤인성&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9791156005896&quot; target=&quot;_blank&quot;&gt;언리얼 게임개봘과 시뮬레이션 by 박종승, 오경수&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>nogamsung</name>
        
        
      </author>

      

      
        <category term="etc" />
      

      
        <summary type="html">Basic Terms Unreal Editor: Development environment for Unreal engine. Level Editor: An interface used for the design and construction of game levels and environments. Level: Made up of a collection of static meshes, volumes, lights, blueprints, and more all working together to bring the desired experience to a player. Asset: A piece of content for an Unreal project and can be thought of as a UObject serialized to a file. Actor: Object in level such as a camera, static mesh, or player start location.</summary>
      

      
      
    </entry>
  
</feed>
